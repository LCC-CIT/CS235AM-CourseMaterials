//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by SlSvcUtil, version 5.0.61118.0
// 
namespace WcfServiceHost.Model
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonkeyQuery", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceHost.Model")]
    public partial class MonkeyQuery : object
    {
        
        private string FamilyField;
        
        private string GenusField;
        
        private string SubfamilyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Family
        {
            get
            {
                return this.FamilyField;
            }
            set
            {
                this.FamilyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Genus
        {
            get
            {
                return this.GenusField;
            }
            set
            {
                this.GenusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subfamily
        {
            get
            {
                return this.SubfamilyField;
            }
            set
            {
                this.SubfamilyField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MonkeyInformation", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceHost.Model")]
    public partial class MonkeyInformation : object
    {
        
        private string CommonNameField;
        
        private string FamilyField;
        
        private string GenusField;
        
        private string ScientificNameField;
        
        private string SubfamilyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CommonName
        {
            get
            {
                return this.CommonNameField;
            }
            set
            {
                this.CommonNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Family
        {
            get
            {
                return this.FamilyField;
            }
            set
            {
                this.FamilyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Genus
        {
            get
            {
                return this.GenusField;
            }
            set
            {
                this.GenusField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScientificName
        {
            get
            {
                return this.ScientificNameField;
            }
            set
            {
                this.ScientificNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Subfamily
        {
            get
            {
                return this.SubfamilyField;
            }
            set
            {
                this.SubfamilyField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IMonkeyService")]
public interface IMonkeyService
{
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMonkeyService/GetRandomMonkeyName", ReplyAction="http://tempuri.org/IMonkeyService/GetRandomMonkeyNameResponse")]
    System.IAsyncResult BeginGetRandomMonkeyName(System.AsyncCallback callback, object asyncState);
    
    string EndGetRandomMonkeyName(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMonkeyService/GetMonkeyMatch", ReplyAction="http://tempuri.org/IMonkeyService/GetMonkeyMatchResponse")]
    System.IAsyncResult BeginGetMonkeyMatch(WcfServiceHost.Model.MonkeyQuery query, System.AsyncCallback callback, object asyncState);
    
    WcfServiceHost.Model.MonkeyInformation[] EndGetMonkeyMatch(System.IAsyncResult result);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IMonkeyServiceChannel : IMonkeyService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetRandomMonkeyNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetRandomMonkeyNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public string Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((string)(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class GetMonkeyMatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
{
    
    private object[] results;
    
    public GetMonkeyMatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
            base(exception, cancelled, userState)
    {
        this.results = results;
    }
    
    public WcfServiceHost.Model.MonkeyInformation[] Result
    {
        get
        {
            base.RaiseExceptionIfNecessary();
            return ((WcfServiceHost.Model.MonkeyInformation[])(this.results[0]));
        }
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class MonkeyServiceClient : System.ServiceModel.ClientBase<IMonkeyService>, IMonkeyService
{
    
    private BeginOperationDelegate onBeginGetRandomMonkeyNameDelegate;
    
    private EndOperationDelegate onEndGetRandomMonkeyNameDelegate;
    
    private System.Threading.SendOrPostCallback onGetRandomMonkeyNameCompletedDelegate;
    
    private BeginOperationDelegate onBeginGetMonkeyMatchDelegate;
    
    private EndOperationDelegate onEndGetMonkeyMatchDelegate;
    
    private System.Threading.SendOrPostCallback onGetMonkeyMatchCompletedDelegate;
    
    private BeginOperationDelegate onBeginOpenDelegate;
    
    private EndOperationDelegate onEndOpenDelegate;
    
    private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
    
    private BeginOperationDelegate onBeginCloseDelegate;
    
    private EndOperationDelegate onEndCloseDelegate;
    
    private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
    
    public MonkeyServiceClient()
    {
    }
    
    public MonkeyServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MonkeyServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MonkeyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MonkeyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public System.Net.CookieContainer CookieContainer
    {
        get
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                return httpCookieContainerManager.CookieContainer;
            }
            else
            {
                return null;
            }
        }
        set
        {
            System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
            if ((httpCookieContainerManager != null))
            {
                httpCookieContainerManager.CookieContainer = value;
            }
            else
            {
                throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                        "ookieContainerBindingElement.");
            }
        }
    }
    
    public event System.EventHandler<GetRandomMonkeyNameCompletedEventArgs> GetRandomMonkeyNameCompleted;
    
    public event System.EventHandler<GetMonkeyMatchCompletedEventArgs> GetMonkeyMatchCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
    
    public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IMonkeyService.BeginGetRandomMonkeyName(System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetRandomMonkeyName(callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    string IMonkeyService.EndGetRandomMonkeyName(System.IAsyncResult result)
    {
        return base.Channel.EndGetRandomMonkeyName(result);
    }
    
    private System.IAsyncResult OnBeginGetRandomMonkeyName(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((IMonkeyService)(this)).BeginGetRandomMonkeyName(callback, asyncState);
    }
    
    private object[] OnEndGetRandomMonkeyName(System.IAsyncResult result)
    {
        string retVal = ((IMonkeyService)(this)).EndGetRandomMonkeyName(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetRandomMonkeyNameCompleted(object state)
    {
        if ((this.GetRandomMonkeyNameCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetRandomMonkeyNameCompleted(this, new GetRandomMonkeyNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetRandomMonkeyNameAsync()
    {
        this.GetRandomMonkeyNameAsync(null);
    }
    
    public void GetRandomMonkeyNameAsync(object userState)
    {
        if ((this.onBeginGetRandomMonkeyNameDelegate == null))
        {
            this.onBeginGetRandomMonkeyNameDelegate = new BeginOperationDelegate(this.OnBeginGetRandomMonkeyName);
        }
        if ((this.onEndGetRandomMonkeyNameDelegate == null))
        {
            this.onEndGetRandomMonkeyNameDelegate = new EndOperationDelegate(this.OnEndGetRandomMonkeyName);
        }
        if ((this.onGetRandomMonkeyNameCompletedDelegate == null))
        {
            this.onGetRandomMonkeyNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRandomMonkeyNameCompleted);
        }
        base.InvokeAsync(this.onBeginGetRandomMonkeyNameDelegate, null, this.onEndGetRandomMonkeyNameDelegate, this.onGetRandomMonkeyNameCompletedDelegate, userState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.IAsyncResult IMonkeyService.BeginGetMonkeyMatch(WcfServiceHost.Model.MonkeyQuery query, System.AsyncCallback callback, object asyncState)
    {
        return base.Channel.BeginGetMonkeyMatch(query, callback, asyncState);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    WcfServiceHost.Model.MonkeyInformation[] IMonkeyService.EndGetMonkeyMatch(System.IAsyncResult result)
    {
        return base.Channel.EndGetMonkeyMatch(result);
    }
    
    private System.IAsyncResult OnBeginGetMonkeyMatch(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        WcfServiceHost.Model.MonkeyQuery query = ((WcfServiceHost.Model.MonkeyQuery)(inValues[0]));
        return ((IMonkeyService)(this)).BeginGetMonkeyMatch(query, callback, asyncState);
    }
    
    private object[] OnEndGetMonkeyMatch(System.IAsyncResult result)
    {
        WcfServiceHost.Model.MonkeyInformation[] retVal = ((IMonkeyService)(this)).EndGetMonkeyMatch(result);
        return new object[] {
                retVal};
    }
    
    private void OnGetMonkeyMatchCompleted(object state)
    {
        if ((this.GetMonkeyMatchCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.GetMonkeyMatchCompleted(this, new GetMonkeyMatchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void GetMonkeyMatchAsync(WcfServiceHost.Model.MonkeyQuery query)
    {
        this.GetMonkeyMatchAsync(query, null);
    }
    
    public void GetMonkeyMatchAsync(WcfServiceHost.Model.MonkeyQuery query, object userState)
    {
        if ((this.onBeginGetMonkeyMatchDelegate == null))
        {
            this.onBeginGetMonkeyMatchDelegate = new BeginOperationDelegate(this.OnBeginGetMonkeyMatch);
        }
        if ((this.onEndGetMonkeyMatchDelegate == null))
        {
            this.onEndGetMonkeyMatchDelegate = new EndOperationDelegate(this.OnEndGetMonkeyMatch);
        }
        if ((this.onGetMonkeyMatchCompletedDelegate == null))
        {
            this.onGetMonkeyMatchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMonkeyMatchCompleted);
        }
        base.InvokeAsync(this.onBeginGetMonkeyMatchDelegate, new object[] {
                    query}, this.onEndGetMonkeyMatchDelegate, this.onGetMonkeyMatchCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
    }
    
    private object[] OnEndOpen(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
        return null;
    }
    
    private void OnOpenCompleted(object state)
    {
        if ((this.OpenCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void OpenAsync()
    {
        this.OpenAsync(null);
    }
    
    public void OpenAsync(object userState)
    {
        if ((this.onBeginOpenDelegate == null))
        {
            this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
        }
        if ((this.onEndOpenDelegate == null))
        {
            this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
        }
        if ((this.onOpenCompletedDelegate == null))
        {
            this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
        }
        base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
    }
    
    private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
    {
        return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
    }
    
    private object[] OnEndClose(System.IAsyncResult result)
    {
        ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
        return null;
    }
    
    private void OnCloseCompleted(object state)
    {
        if ((this.CloseCompleted != null))
        {
            InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
            this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
        }
    }
    
    public void CloseAsync()
    {
        this.CloseAsync(null);
    }
    
    public void CloseAsync(object userState)
    {
        if ((this.onBeginCloseDelegate == null))
        {
            this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
        }
        if ((this.onEndCloseDelegate == null))
        {
            this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
        }
        if ((this.onCloseCompletedDelegate == null))
        {
            this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
        }
        base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
    }
    
    protected override IMonkeyService CreateChannel()
    {
        return new MonkeyServiceClientChannel(this);
    }
    
    private class MonkeyServiceClientChannel : ChannelBase<IMonkeyService>, IMonkeyService
    {
        
        public MonkeyServiceClientChannel(System.ServiceModel.ClientBase<IMonkeyService> client) : 
                base(client)
        {
        }
        
        public System.IAsyncResult BeginGetRandomMonkeyName(System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[0];
            System.IAsyncResult _result = base.BeginInvoke("GetRandomMonkeyName", _args, callback, asyncState);
            return _result;
        }
        
        public string EndGetRandomMonkeyName(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            string _result = ((string)(base.EndInvoke("GetRandomMonkeyName", _args, result)));
            return _result;
        }
        
        public System.IAsyncResult BeginGetMonkeyMatch(WcfServiceHost.Model.MonkeyQuery query, System.AsyncCallback callback, object asyncState)
        {
            object[] _args = new object[1];
            _args[0] = query;
            System.IAsyncResult _result = base.BeginInvoke("GetMonkeyMatch", _args, callback, asyncState);
            return _result;
        }
        
        public WcfServiceHost.Model.MonkeyInformation[] EndGetMonkeyMatch(System.IAsyncResult result)
        {
            object[] _args = new object[0];
            WcfServiceHost.Model.MonkeyInformation[] _result = ((WcfServiceHost.Model.MonkeyInformation[])(base.EndInvoke("GetMonkeyMatch", _args, result)));
            return _result;
        }
    }
}
